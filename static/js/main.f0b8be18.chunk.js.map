{"version":3,"sources":["logo.svg","utils/index.js","Components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","sizes","enlarged","desktop","tablet","phone","android","media","Object","keys","reduce","acc","label","css","window","matchMedia","matches","Body","styled","div","Header","motion","TopBar","NameTag","ContentBody","ExperienceHeader","ExperienceCards","ExperienceCardHeader","ExperienceCardRows","ExperienceFooter","Main","style","display","width","height","borderRadius","border","color","fontFamily","fontSize","justifyContent","alignItems","opacity","animate","transition","duration","ease","delay","margin","whileTap","scale","whileHover","backgroundColor","Component","App","document","body","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0b8be18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { css } from \"styled-components\";\n\nconst sizes = {\n  enlarged: 1121,\n  desktop: 1025,\n  tablet: 769,\n  phone: 550,\n  android: 365\n};\n\nexport const media = Object.keys(sizes).reduce((acc, label) => {\n  acc[label] = (...args) => css`\n    @media (max-width: ${sizes[label] / 16}em) {\n      ${css(...args)};\n    }\n  `;\n  return acc;\n}, {});\n\nexport const mediaType = Object.keys(sizes).reduce((acc, label) => {\n  acc[label] = window.matchMedia(`(max-width: ${sizes[label]}px)`).matches;\n  return acc;\n}, {});\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { motion } from \"framer-motion\";\r\nimport Particles from \"react-particles-js\";\r\nimport { media, mediaType } from \"../../utils/index\";\r\n/* Icons. */\r\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\r\nimport StorageIcon from \"@material-ui/icons/Storage\";\r\nimport BuildIcon from \"@material-ui/icons/Build\";\r\nconst params = {\r\n  particles: {\r\n    number: {\r\n      value: 150,\r\n      density: {\r\n        enable: true,\r\n        value_area: 100\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst Body = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  user-select: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  overflow-x: hidden;\r\n  padding: 10px;\r\n  &::-webkit-scrollbar {\r\n    width: 3px;\r\n    height: 9px;\r\n  }\r\n\r\n  /* Track */\r\n  &::-webkit-scrollbar-track {\r\n    background: #1d252d;\r\n    width: 4px;\r\n  }\r\n\r\n  /* Handle */\r\n  &::-webkit-scrollbar-thumb {\r\n    background: #888;\r\n    border-radius: 10px;\r\n  }\r\n\r\n  /* Handle on hover */\r\n  &::-webkit-scrollbar-thumb:hover {\r\n    background: #555;\r\n  }\r\n`;\r\n\r\nconst Header = styled(motion.div)`\r\n  width: auto;\r\n  height: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-family: Quicksand;\r\n  font-weight: 500;\r\n  font-size: 72px;\r\n  color: white;\r\n  word-spacing: 10px;\r\n  user-select: none;\r\n  padding: 10px;\r\n  justify-self: center;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  padding: 10px;\r\n`;\r\n\r\nconst NameTag = styled.div``;\r\n\r\nconst ContentBody = styled(motion.div)`\r\n  width: 70%;\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n\r\n  ${media.phone`\r\n    width : 100%\r\n  `}\r\n`;\r\n\r\nconst ExperienceHeader = styled(motion.div)`\r\n  user-select: none;\r\n  width: 70%;\r\n  height: 30px;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  font-color: white;\r\n  font-family: Quicksand;\r\n  font-weight: 400;\r\n  font-size: 20px;\r\n  color: white;\r\n  ${media.phone`\r\n    width : 100%;\r\n    justify-content : center;\r\n    padding : 10px;\r\n  `}\r\n`;\r\n\r\nconst ExperienceCards = styled(motion.div)`\r\n  width: 100%;\r\n  min-height: 300px;\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  background-color: rgba(33, 52, 97, 0.47);\r\n  border-radius: 10px;\r\n  margin-top: 20px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst ExperienceCardHeader = styled(motion.div)`\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  color: white;\r\n  font-family: Quicksand;\r\n  font-weight: 400;\r\n  font-size: 18px;\r\n  justify-content: space-between;\r\n  ${media.phone`\r\n    justify-content : space-evenly;\r\n  `}\r\n`;\r\nconst ExperienceCardRows = styled(motion.div)`\r\n  display: flex;\r\n  margin-top: 20px;\r\n  color: white;\r\n  flex-direction: rows;\r\n  width: 95%;\r\n  height: auto;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  font-size: 14px;\r\n`;\r\n\r\nconst ExperienceFooter = styled.div`\r\n  width: 80%;\r\n  margin-top: 20px;\r\n  height: auto;\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\nexport default class Main extends Component {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Body>\r\n        <TopBar>\r\n          <NameTag>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"50px\",\r\n                height: \"45px\",\r\n                borderRadius: \"10px\",\r\n                border: \"2px solid white\",\r\n                color: \"white\",\r\n                fontFamily: \"Quicksand\",\r\n                fontSize: \"24px\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                opacity: \"0.8\"\r\n              }}\r\n            >\r\n              PG\r\n            </div>\r\n          </NameTag>\r\n        </TopBar>\r\n        <Header\r\n          animate={{\r\n            opacity: [0, 1]\r\n          }}\r\n          transition={{ duration: 2, ease: [0.03, 0.69, 0.67, 0.96] }}\r\n        >\r\n          Pratik Gurudatt.\r\n        </Header>\r\n        <motion.div\r\n          animate={{ opacity: [0, 1] }}\r\n          transition={{\r\n            delay: 0.75,\r\n            duration: 1,\r\n            ease: [0.03, 0.69, 0.67, 0.96]\r\n          }}\r\n          style={{\r\n            color: \"white\",\r\n            width: \"90%\",\r\n            height: \"100px\",\r\n            margin: \"10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            fontSize: \"16px\",\r\n            opacity: \"0.8\"\r\n          }}\r\n        >\r\n          I'm a software engineer based in Warsaw, PL specializing in building\r\n          (and occasionally designing) software.\r\n        </motion.div>\r\n        <ExperienceHeader\r\n          animate={{ opacity: [0, 1] }}\r\n          transition={{\r\n            delay: 0.9,\r\n            duration: 1,\r\n            ease: [0.03, 0.69, 0.67, 0.96]\r\n          }}\r\n        >\r\n          Professional Experience\r\n        </ExperienceHeader>\r\n        <ContentBody\r\n          animate={{ opacity: [0, 1] }}\r\n          transition={{\r\n            delay: 1,\r\n            duration: 1,\r\n            ease: [0.03, 0.69, 0.67, 0.96]\r\n          }}\r\n        >\r\n          <ExperienceCards\r\n            whileTap={{ scale: 0.98 }}\r\n            whileHover={{\r\n              backgroundColor: \"rgb(109, 130, 255)\"\r\n            }}\r\n            transition={{ duration: 0.2, ease: \"linear\" }}\r\n          >\r\n            <ExperienceCardHeader>\r\n              <div>Cthings.co</div>\r\n              <div style={{ fontSize: \"16px\" }}>SDE II</div>\r\n              <div>July 2017-Present</div>\r\n            </ExperienceCardHeader>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Designed, Developed and Implemented a web-application analytics\r\n                suite for visualizing client data on scale using React.js.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Materialized mockups to react code, while also abiding to\r\n                requests from the business team.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Worked extensively on backend technologies including Django,\r\n                Flask, and adopted server-less frameworks, micro-services and\r\n                integral design principles for lag-free user experience.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Improved backend system architecture with Amazon Web Services,\r\n                including SQS, Lambda, Redis, Dynamo, EMQX and Elastic-search.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Product Owner of client analytics, the role necessitated the\r\n                need for data reliability and integrity. Wrote a datahub in\r\n                Python for structuring and harmonizing data with Pandas for\r\n                synching data formats for the database and the visualization\r\n                platform.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceFooter>\r\n              <div\r\n                style={{\r\n                  color: \"#CCCCCC\",\r\n                  height: \"auto\",\r\n                  fontSize: \"12px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\"\r\n                }}\r\n              >\r\n                <StorageIcon style={{ color: \"white\", margin: \"5px\" }} />\r\n                DynamoDb, ElasticSearch, MySQL, Redix, Amazon Cosmos DB, Mongo.\r\n              </div>\r\n              <div\r\n                style={{\r\n                  color: \"#CCCCCC\",\r\n                  height: \"auto\",\r\n                  fontSize: \"12px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\"\r\n                }}\r\n              >\r\n                <BuildIcon style={{ color: \"white\", margin: \"5px\" }} />\r\n                Pandas, EMQX, React.Js, Kibana, Kafka, FramerX, Figma, SciKit,\r\n                GIT, CI/CD.\r\n              </div>\r\n            </ExperienceFooter>\r\n          </ExperienceCards>\r\n        </ContentBody>\r\n        <ContentBody\r\n          animate={{\r\n            opacity: [0, 1]\r\n          }}\r\n          transition={{\r\n            delay: 1.1,\r\n            duration: 1,\r\n            ease: \"linear\"\r\n          }}\r\n        >\r\n          <ExperienceCards\r\n            whileTap={{ scale: 0.98 }}\r\n            whileHover={{\r\n              backgroundColor: \"rgb(109, 130, 255)\"\r\n            }}\r\n            transition={{ duration: 0.2, ease: \"linear\" }}\r\n          >\r\n            <ExperienceCardHeader>\r\n              <div>Cthings.co</div>\r\n              <div style={{ fontSize: \"16px\" }}>HW Engineer</div>\r\n              <div>July 2017-July 2019</div>\r\n            </ExperienceCardHeader>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                End-End system design in the IoT domain, architected IoT\r\n                solutions for wireless sensor networks for BLE, WiFi and\r\n                cellular.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Wrote firmware for different chipsets for networking in C/C++\r\n                and application level code in Python.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Wrote custom MQTT-SN stack in C, for the 32 Bit SAMD21 series\r\n                chipset, designed a broker with EMQX on lambdas for cloud\r\n                interface with sensors.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceCardRows>\r\n              <li>\r\n                Wrote serial communication stacks like I2C and UART on the\r\n                SAMD20 for debugging and on-board communication with other\r\n                devices.\r\n              </li>\r\n            </ExperienceCardRows>\r\n            <ExperienceFooter>\r\n              <div\r\n                style={{\r\n                  color: \"#CCCCCC\",\r\n                  height: \"auto\",\r\n                  fontSize: \"12px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\"\r\n                }}\r\n              >\r\n                <BuildIcon style={{ color: \"white\", margin: \"5px\" }} />\r\n                Altium PCB designer, Heat Wave Soldering, Logic Analyzer.\r\n              </div>\r\n            </ExperienceFooter>\r\n          </ExperienceCards>\r\n        </ContentBody>\r\n      </Body>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Particles from 'react-particles-js';\n\n\nimport Main from \"./Components/Main\";\n\n\n\nfunction App() {\n  document.body.style.backgroundColor = \"rgba(10, 25, 47)\";\n\n  return (\n    <div style={{width:\"100%\", height:\"100%\", display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n      <Main>\n      </Main>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}