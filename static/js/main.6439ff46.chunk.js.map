{"version":3,"sources":["logo.svg","Components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","styled","div","Header","motion","TopBar","NameTag","Main","style","display","width","height","borderRadius","border","color","fontFamily","fontSize","justifyContent","alignItems","opacity","animate","transition","duration","ease","delay","margin","Component","App","document","body","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,8nDCI3C,IAYMC,EAAOC,IAAOC,IAAV,KAkCJC,EAASF,YAAOG,IAAOF,IAAdD,CAAH,KAgBNI,EAASJ,IAAOC,IAAV,KAUNI,EAAUL,IAAOC,IAAV,KAIQK,E,YACjB,aAAc,uE,sEAOV,OACI,kBAACP,EAAD,KACE,kBAACK,EAAD,KACI,kBAACC,EAAD,KACE,yBAAKE,MAAO,CAACC,QAAQ,OAAQC,MAAM,OAAQC,OAAO,OAAQC,aAAa,OAAQC,OAAO,kBAAmBC,MAAM,QAASC,WAAW,YAAaC,SAAS,OAAQC,eAAe,SAAUC,WAAW,SAAUC,QAAQ,QAAvN,QAKN,kBAAChB,EAAD,CACEiB,QAAS,CACPD,QAAS,CAAC,EAAG,IAEfE,WAAY,CAACC,SAAU,EAAGC,KAAK,CAAC,IAAM,IAAM,IAAM,OAJpD,oBAQA,kBAAC,IAAOrB,IAAR,CACAkB,QAAS,CAACD,QAAQ,CAAC,EAAG,IACtBE,WAAY,CAACG,MAAO,EAAGF,SAAU,EAAGC,KAAK,CAAC,IAAM,IAAM,IAAM,MAE5Df,MAAO,CAACM,MAAQ,QAASJ,MAAM,MAAOC,OAAO,QAAUc,OAAO,OAAQhB,QAAQ,OAAQQ,eAAe,SAAUD,SAAS,OAAQG,QAAQ,QAJxI,oH,GAzBoBO,aC1DnBC,MAZf,WAGE,OAFAC,SAASC,KAAKrB,MAAMsB,gBAAkB,mBAGpC,yBAAKtB,MAAO,CAACE,MAAM,OAAQC,OAAO,OAAQF,QAAQ,OAAQQ,eAAe,SAAUC,WAAW,WAC5F,kBAAC,EAAD,QCHca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAST,SAASU,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6439ff46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {motion} from \"framer-motion\";\r\nimport Particles from 'react-particles-js';\r\nconst params = {\r\n  particles : {\r\n    number   : {\r\n      value  : 150, \r\n      density : {\r\n        enable : true,\r\n        value_area :  100\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst Body = styled.div`\r\n    width : 100%;\r\n    height: 100%;\r\n   \r\n    display : flex;\r\n    justify-content: center;\r\n    align-items    : center;\r\n    flex-direction : column;\r\n    overflow-x     : hidden;\r\n    padding : 10px;\r\n    &::-webkit-scrollbar {\r\n        width        : 3px;\r\n        height       : 9px;\r\n      }\r\n    \r\n      /* Track */\r\n      &::-webkit-scrollbar-track {\r\n        background: #1d252d;\r\n        width: 4px;\r\n      }\r\n    \r\n      /* Handle */\r\n      &::-webkit-scrollbar-thumb {\r\n        background: #888;\r\n        border-radius: 10px;\r\n      }\r\n    \r\n      /* Handle on hover */\r\n      &::-webkit-scrollbar-thumb:hover {\r\n        background: #555;\r\n      }\r\n\r\n`;\r\n\r\nconst Header = styled(motion.div)`\r\n    width          : auto;\r\n    height         : auto;\r\n    display        : flex;\r\n    align-items    : center;\r\n    justify-content: center;\r\n    font-family    : Quicksand;\r\n    font-weight    : 500;\r\n    font-size      : 72px;\r\n    color          : white;\r\n    word-spacing   : 10px;\r\n    user-select    : none;\r\n    padding        : 10px;\r\n    justify-self   : center;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n    width : 100%;\r\n    height: 50px;\r\n    display : flex;\r\n    align-items: center;\r\n    justify-content : space-between;\r\n    \r\n    padding: 10px;\r\n`;\r\n\r\nconst NameTag = styled.div`\r\n      \r\n`;\r\n\r\nexport default class Main extends Component {\r\n    constructor(){\r\n        super();\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (  \r\n            <Body>\r\n              <TopBar>\r\n                  <NameTag>\r\n                    <div style={{display:\"flex\", width:\"50px\", height:\"45px\", borderRadius:\"10px\", border:\"2px solid white\", color:\"white\", fontFamily:\"Quicksand\", fontSize:\"24px\", justifyContent:\"center\", alignItems:\"center\", opacity:\"0.8\"}}>\r\n                        PG\r\n                    </div>\r\n                  </NameTag>\r\n              </TopBar>\r\n              <Header\r\n                animate={{\r\n                  opacity: [0, 1],\r\n                }}\r\n                transition={{duration: 2, ease:[0.03, 0.69, 0.67, 0.96]}}\r\n                >\r\n                  Pratik Gurudatt.\r\n              </Header>\r\n              <motion.div \r\n              animate={{opacity:[0, 1]}}\r\n              transition={{delay: 1, duration: 2, ease:[0.03, 0.69, 0.67, 0.96] }}\r\n              \r\n              style={{color : \"white\", width:\"90%\", height:\"300px\" , margin:\"10px\", display:\"flex\", justifyContent:\"center\", fontSize:\"18px\", opacity:\"0.8\"}}>\r\n              I'm a software engineer based in Warsaw, PL specializing in building (and occasionally designing) software.\r\n              </motion.div>\r\n            </Body>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Particles from 'react-particles-js';\n\n\nimport Main from \"./Components/Main\";\n\n\n\nfunction App() {\n  document.body.style.backgroundColor = \"rgba(10, 25, 47)\";\n\n  return (\n    <div style={{width:\"100%\", height:\"100%\", display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n      <Main>\n      </Main>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}